// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"
	"database/sql"

	"github.com/AbhinavPalacharla/xtrn-personal/internal/db/models"
)

const getMCPServerImage = `-- name: GetMCPServerImage :one
SELECT
  images.id, images.slug, images.version, images.name, images.docker_image, images.type, images.oauth_provider, images.env_schema,
  providers.name as provider_name,
  providers.client_id,
  providers.client_secret
FROM
  mcp_server_images AS images
  LEFT JOIN oauth_providers AS providers ON images.oauth_provider = providers.name
WHERE
  images.id = ?
`

type GetMCPServerImageRow struct {
	ID            string
	Slug          string
	Version       int64
	Name          string
	DockerImage   string
	Type          string
	OauthProvider sql.NullString
	EnvSchema     models.EnvSchema
	ProviderName  sql.NullString
	ClientID      sql.NullString
	ClientSecret  sql.NullString
}

func (q *Queries) GetMCPServerImage(ctx context.Context, id string) (GetMCPServerImageRow, error) {
	row := q.db.QueryRowContext(ctx, getMCPServerImage, id)
	var i GetMCPServerImageRow
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.Version,
		&i.Name,
		&i.DockerImage,
		&i.Type,
		&i.OauthProvider,
		&i.EnvSchema,
		&i.ProviderName,
		&i.ClientID,
		&i.ClientSecret,
	)
	return i, err
}

const insertMCPServerImage = `-- name: InsertMCPServerImage :exec
/*
MCP Server Image Queries
*/
INSERT INTO
  mcp_server_images (
    id,
    slug,
    version,
    name,
    docker_image,
    type,
    oauth_provider,
    env_schema
  )
VALUES
  (?, ?, ?, ?, ?, ?, ?, ?)
`

type InsertMCPServerImageParams struct {
	ID            string
	Slug          string
	Version       int64
	Name          string
	DockerImage   string
	Type          string
	OauthProvider sql.NullString
	EnvSchema     models.EnvSchema
}

// *********************************
func (q *Queries) InsertMCPServerImage(ctx context.Context, arg InsertMCPServerImageParams) error {
	_, err := q.db.ExecContext(ctx, insertMCPServerImage,
		arg.ID,
		arg.Slug,
		arg.Version,
		arg.Name,
		arg.DockerImage,
		arg.Type,
		arg.OauthProvider,
		arg.EnvSchema,
	)
	return err
}

const insertMCPServerInstance = `-- name: InsertMCPServerInstance :exec
/*
MCP Server Instance Queries
*/
INSERT INTO
  mcp_server_instances (id, slug, version, address, env)
VALUES
  (?, ?, ?, ?, ?)
`

type InsertMCPServerInstanceParams struct {
	ID      string
	Slug    string
	Version int64
	Address string
	Env     interface{}
}

// *********************************
func (q *Queries) InsertMCPServerInstance(ctx context.Context, arg InsertMCPServerInstanceParams) error {
	_, err := q.db.ExecContext(ctx, insertMCPServerInstance,
		arg.ID,
		arg.Slug,
		arg.Version,
		arg.Address,
		arg.Env,
	)
	return err
}

const insertOauthProvider = `-- name: InsertOauthProvider :exec
/*
OAUTH token queries
*/
INSERT INTO
  oauth_providers (name, client_id, client_secret)
VALUES
  (?, ?, ?)
`

type InsertOauthProviderParams struct {
	Name         string
	ClientID     string
	ClientSecret string
}

// *********************************
func (q *Queries) InsertOauthProvider(ctx context.Context, arg InsertOauthProviderParams) error {
	_, err := q.db.ExecContext(ctx, insertOauthProvider, arg.Name, arg.ClientID, arg.ClientSecret)
	return err
}

const insertOauthToken = `-- name: InsertOauthToken :exec
INSERT INTO
  oauth_tokens (
    id,
    access_token,
    refresh_token,
    expiry,
    oauth_provider
  )
VALUES
  (?, ?, ?, ?, ?)
`

type InsertOauthTokenParams struct {
	ID            string
	AccessToken   string
	RefreshToken  string
	Expiry        string
	OauthProvider string
}

func (q *Queries) InsertOauthToken(ctx context.Context, arg InsertOauthTokenParams) error {
	_, err := q.db.ExecContext(ctx, insertOauthToken,
		arg.ID,
		arg.AccessToken,
		arg.RefreshToken,
		arg.Expiry,
		arg.OauthProvider,
	)
	return err
}
